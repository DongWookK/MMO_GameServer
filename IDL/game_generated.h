// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAME_H_
#define FLATBUFFERS_GENERATED_GAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

struct TestEcho;
struct TestEchoBuilder;

struct TestEcho FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestEchoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::String *data() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct TestEchoBuilder {
  typedef TestEcho Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::String> data) {
    fbb_.AddOffset(TestEcho::VT_DATA, data);
  }
  explicit TestEchoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TestEcho> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TestEcho>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TestEcho> CreateTestEcho(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> data = 0) {
  TestEchoBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TestEcho> CreateTestEchoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return CreateTestEcho(
      _fbb,
      data__);
}

inline const TestEcho *GetTestEcho(const void *buf) {
  return ::flatbuffers::GetRoot<TestEcho>(buf);
}

inline const TestEcho *GetSizePrefixedTestEcho(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TestEcho>(buf);
}

inline bool VerifyTestEchoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestEcho>(nullptr);
}

inline bool VerifySizePrefixedTestEchoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestEcho>(nullptr);
}

inline void FinishTestEchoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestEcho> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestEchoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestEcho> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_GAME_H_
